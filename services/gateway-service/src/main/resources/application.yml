server:
  port: 8080

spring:
  application:
    name: gateway-service

  # Redis configuration with proper authentication
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:redis123}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
        shutdown-timeout: 100ms

  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/v1/users/**,/api/v1/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: user-service
                fallbackUri: forward:/fallback/user-service
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1

        - id: bus-service
          uri: lb://BUS-SERVICE
          predicates:
            - Path=/api/v1/buses/**
          filters:
            - name: CircuitBreaker
              args:
                name: bus-service
                fallbackUri: forward:/fallback/bus-service
            - AuthenticationFilter

        - id: route-service
          uri: lb://ROUTE-SERVICE
          predicates:
            - Path=/api/v1/routes/**
          filters:
            - name: CircuitBreaker
              args:
                name: route-service
                fallbackUri: forward:/fallback/route-service

        - id: booking-service
          uri: lb://BOOKING-SERVICE
          predicates:
            - Path=/api/v1/bookings/**
          filters:
            - name: CircuitBreaker
              args:
                name: booking-service
                fallbackUri: forward:/fallback/booking-service
            - AuthenticationFilter

      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origins:
              - "http://localhost:3000"
              - "https://buses.lk"
            allowed-methods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowed-headers:
              - "*"
            allow-credentials: true
            max-age: 3600

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
  instance:
    prefer-ip-address: true

resilience4j:
  circuitbreaker:
    instances:
      user-service:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        permitted-number-of-calls-in-half-open-state: 3
      bus-service:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        permitted-number-of-calls-in-half-open-state: 3

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    gateway:
      enabled: true
  health:
    redis:
      enabled: true

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.data.redis: DEBUG